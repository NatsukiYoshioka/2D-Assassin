#include"map_header.h"
#include"player.h"
#include"collision.h"

//////////////////////////////////////////////
// 定数定義
//////////////////////////////////////////////
const int mapChipSize = 37;  // マップチップ１個の大きさ
const int mapXNum = 141;      // マップの横方向チップ数
const int mapYNum = 18;      // マップの縦方向チップ数
const int mapImgXNum = 5;    // マップチップ画像の横方向チップ数
const int mapImgYNum = 1;    // マップチップ画像の縦方向チップ数
const int block1SizeX = 111;
const int block1SizeY = 111;

moveblock block1;
sHitRect blockRect;
sHitRect moveblock1;
BlockInfo climbside;
int ps;   //プレイヤーの状態

float blockmove;
float blockfall;
float mx = 0;
float my = 0;
float scrollX = 0;
int playerPosition = 0;
bool survive = true;
bool clear = false;
bool onGroundMoveBlock = true;

const unsigned char map[][mapXNum] =
{
	//1stage 32マス
  //stage1                                                        //stage2                                                        //stage3                                                          //stage4
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,1,3,3,3,3,3,1,1,4,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,2,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,1,0,0,0,0,0,0,2,4,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,2,1,1,0,0,0,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,2,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,2,1,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,2,1,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,1,1,1,1,1,1,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,2,1,4,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
};
int mapChipImg[5]; //画像ハンドル配列

//マップの初期化
void mapInit()
{
    // 画像総数  横枚数x縦枚数,横方向個数,縦方向個数,チップ1枚の横サイズ, チップ1毎の縦サイズ, 画像配列先頭ポインタ 
    LoadDivGraph("image/map1.png", mapImgXNum * mapImgYNum, mapImgXNum, mapImgYNum, mapChipSize, mapChipSize, mapChipImg);
    block1.x = 71;
    block1.y = 6;
    blockmove = 0;
    blockfall = 0;
    mx = 0;
    initRect(moveblock1, block1SizeX - 10, block1SizeY);
    scrollX = 0;
    survive = true;
    clear = false;
}

//マップ描画
void mapDraw()
{
    int x, y;    //描画イメージ
    float screenCenterNum = getMapXNum();
    float vx = getPlayerMoveSpeed();
    float px = getPlayerXPoisition();
    float py = getPlayerYPosition();

    int imgIndex;
    int imgHandle;

    if (px > 555.0f && (blockfall == 0 || blockfall == 111))
    {
        scrollX += vx;
    }
    else if (blockfall > 0 && blockfall < 111 && vx < 0)
    {
        scrollX += vx;
    }
    else if (px <= 555.0f)
    {
        scrollX = 0;
    }
    if (py >= 666.0f)
    {
        survive = false;
    }
    for (y = 0; y < mapYNum; y++)
    {
		for (x = 0; x < mapXNum; x++)
        {
            imgIndex = map[y][x];
            imgHandle = mapChipImg[imgIndex];
            // マップチップ幅でブロック画像を敷き詰めて描画する
            // xは0,1,2・・・と変化する。 x * mapChipSize の計算は 0,64,128,196, ... とブロック幅ごとに増える
            DrawGraph(x * mapChipSize - scrollX, y * mapChipSize, imgHandle, TRUE);
        }
    }

    if (blockmove <= scrollX - 111)
    {
        blockmove = scrollX - 111;
        blockfall += 2.0f;
        if (blockfall >= 111)
        {
            blockfall = 111;
        }
    }
    //動かすブロック
    updateWorldRect(moveblock1, block1.x * mapChipSize - blockmove, block1.y * mapChipSize + blockfall);
    DrawExtendGraph(block1.x * mapChipSize - blockmove, block1.y * mapChipSize + blockfall, (block1.x + BLOCK1_WIDTH) * mapChipSize - blockmove, (block1.y + BLOCK1_HEIGHT) * mapChipSize + blockfall, mapChipImg[1], TRUE);

    if (scrollX >= 3926)
    {
        clear = true;
    }
}

//マップ後始末
void mapFinalize()
{
    int i;
    for (i = 0; i < mapImgXNum * mapImgYNum; i++)
    {
        DeleteGraph(mapChipImg[i]);
    }
}

bool mapHitCalc(sHitRect& checkRect)
{
    bool hitflg = false;

    blockRect.w = mapChipSize;
    blockRect.h = mapChipSize;

    my += getFallSpeed();

    // すべてのマップブロック vs 調査ブロックの衝突を調べる
    for (int iy = 0; iy < mapYNum; iy++)
    {
        //マップブロックのY座標
        blockRect.worldLY = static_cast<float>(iy * mapChipSize);
        blockRect.worldRY = static_cast<float>((iy + 1) * mapChipSize);
        for (int ix = 0; ix < mapXNum; ix++)
        {

            // マップブロックのX座標
            blockRect.worldLX = static_cast<float>(ix * mapChipSize - scrollX);
            blockRect.worldRX = blockRect.worldLX + mapChipSize;

            // 当たりブロックか 0→通れる 0以外→通れない 
            if (map[iy][ix] != 0 || (iy >= 9 && ix >= 74 && ix <= 76))
            {
                // 当たっているか？
                if (isHitRect(checkRect, blockRect))
                {
                    // 一度でもブロックと当たったらhitflgをtrueに
                    hitflg = true;

                    // ブロック情報（上下左右壁の有無を調べる）
                    BlockInfo bi = mapGetBlockInfo(ix, iy);

                    // ボックスのめり込み量を計算する
                    // checkRectにはめり込み戻し量が入る
                    scrollX = calcFixHitRectPosition(checkRect, blockRect, bi);

                    if (map[iy][ix] == 2)
                    {
                        ps = 2;
                        climbside = mapGetBlockInfo(ix, iy);
                    }
                    else if (map[iy][ix] == 3)
                    {
                        ps = 3;
                    }
                    else if (map[iy][ix] == 4)
                    {
                        survive = false;
                    }
                    else if (clear)
                    {
                        ps = 1;
                    }
                    else
                    {
                        ps = 0;
                    }
                }
                else if ((ps == 2 || ps == 3) && CheckHitKey(KEY_INPUT_SPACE))
                {
                    ps = 0;
                }
            }
        }
    }
    return hitflg;
}

unsigned char mapGetBlockType(int ix, int iy)
{
	if (ix < 0 || iy < 0 || ix >= mapXNum || iy >= mapYNum)
	{
		return 0;
	}
	return map[iy][ix];
}

BlockInfo mapGetBlockInfo(int ix, int iy)
{
	BlockInfo ret = 0;

	// ブロックの1つ左が空白か？
    if (mapGetBlockType(ix - 1, iy) == 0)
	{
		ret |= BLOCK_LEFT;
	}
	// ブロックの一つ右が空白か？
    if (mapGetBlockType(ix + 1, iy) == 0)
	{
		ret |= BLOCK_RIGHT;
	}
	// ブロックの一つ上が空白か？
	if (mapGetBlockType(ix, iy - 1) == 0)
	{
		ret |= BLOCK_UP;
	}
	//ブロックの一つ下が空白か？
	if (mapGetBlockType(ix, iy + 1) == 0)
	{
		ret |= BLOCK_DOWN;
	}
	// retには4方向の壁の有無のビットが重ね合わされている
	return ret;
}

float getMapXNum()
{
    return mapChipSize * 15;
}

float getScrollXNum()
{
    return scrollX;
}

int getPlayerStatus()
{
    return ps;
}

BlockInfo getClimbSide()
{
    return climbside;
}

bool getPlayerSurvive()
{
    return survive;
}

bool getClear()
{
    return clear;
}

void moveblockPlayerHit(sHitRect playerRect)
{
    float vx;
    vx = getPlayerMoveSpeed();
    if (isHitRect(moveblock1, playerRect))
    {
        if (vx >= 0)
        {
            mx += vx;
        }
    }
    blockmove = scrollX - mx;
}

bool getMoveBlockMapHit()
{
    return onGroundMoveBlock;
}
/*💩*/